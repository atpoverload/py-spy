// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `protos/eflect_stack_trace.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct StackTraceDataSet {
    // message fields
    pub samples: ::protobuf::RepeatedField<StackTraceDataSet_StackTraceSample>,
    pub frames: ::protobuf::RepeatedField<StackTraceDataSet_Frame>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StackTraceDataSet {
    fn default() -> &'a StackTraceDataSet {
        <StackTraceDataSet as ::protobuf::Message>::default_instance()
    }
}

impl StackTraceDataSet {
    pub fn new() -> StackTraceDataSet {
        ::std::default::Default::default()
    }

    // repeated .eflect.proto.StackTraceDataSet.StackTraceSample samples = 1;


    pub fn get_samples(&self) -> &[StackTraceDataSet_StackTraceSample] {
        &self.samples
    }
    pub fn clear_samples(&mut self) {
        self.samples.clear();
    }

    // Param is passed by value, moved
    pub fn set_samples(&mut self, v: ::protobuf::RepeatedField<StackTraceDataSet_StackTraceSample>) {
        self.samples = v;
    }

    // Mutable pointer to the field.
    pub fn mut_samples(&mut self) -> &mut ::protobuf::RepeatedField<StackTraceDataSet_StackTraceSample> {
        &mut self.samples
    }

    // Take field
    pub fn take_samples(&mut self) -> ::protobuf::RepeatedField<StackTraceDataSet_StackTraceSample> {
        ::std::mem::replace(&mut self.samples, ::protobuf::RepeatedField::new())
    }

    // repeated .eflect.proto.StackTraceDataSet.Frame frames = 2;


    pub fn get_frames(&self) -> &[StackTraceDataSet_Frame] {
        &self.frames
    }
    pub fn clear_frames(&mut self) {
        self.frames.clear();
    }

    // Param is passed by value, moved
    pub fn set_frames(&mut self, v: ::protobuf::RepeatedField<StackTraceDataSet_Frame>) {
        self.frames = v;
    }

    // Mutable pointer to the field.
    pub fn mut_frames(&mut self) -> &mut ::protobuf::RepeatedField<StackTraceDataSet_Frame> {
        &mut self.frames
    }

    // Take field
    pub fn take_frames(&mut self) -> ::protobuf::RepeatedField<StackTraceDataSet_Frame> {
        ::std::mem::replace(&mut self.frames, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for StackTraceDataSet {
    fn is_initialized(&self) -> bool {
        for v in &self.samples {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.frames {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.samples)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.frames)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.samples {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.frames {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.samples {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.frames {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StackTraceDataSet {
        StackTraceDataSet::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<StackTraceDataSet_StackTraceSample>>(
                "samples",
                |m: &StackTraceDataSet| { &m.samples },
                |m: &mut StackTraceDataSet| { &mut m.samples },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<StackTraceDataSet_Frame>>(
                "frames",
                |m: &StackTraceDataSet| { &m.frames },
                |m: &mut StackTraceDataSet| { &mut m.frames },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StackTraceDataSet>(
                "StackTraceDataSet",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StackTraceDataSet {
        static instance: ::protobuf::rt::LazyV2<StackTraceDataSet> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StackTraceDataSet::new)
    }
}

impl ::protobuf::Clear for StackTraceDataSet {
    fn clear(&mut self) {
        self.samples.clear();
        self.frames.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StackTraceDataSet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StackTraceDataSet {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StackTraceDataSet_StackTraceSample {
    // message fields
    timestamp: ::std::option::Option<i64>,
    pub traces: ::protobuf::RepeatedField<StackTraceDataSet_ThreadStackTrace>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StackTraceDataSet_StackTraceSample {
    fn default() -> &'a StackTraceDataSet_StackTraceSample {
        <StackTraceDataSet_StackTraceSample as ::protobuf::Message>::default_instance()
    }
}

impl StackTraceDataSet_StackTraceSample {
    pub fn new() -> StackTraceDataSet_StackTraceSample {
        ::std::default::Default::default()
    }

    // required int64 timestamp = 1;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp.unwrap_or(0)
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    // repeated .eflect.proto.StackTraceDataSet.ThreadStackTrace traces = 2;


    pub fn get_traces(&self) -> &[StackTraceDataSet_ThreadStackTrace] {
        &self.traces
    }
    pub fn clear_traces(&mut self) {
        self.traces.clear();
    }

    // Param is passed by value, moved
    pub fn set_traces(&mut self, v: ::protobuf::RepeatedField<StackTraceDataSet_ThreadStackTrace>) {
        self.traces = v;
    }

    // Mutable pointer to the field.
    pub fn mut_traces(&mut self) -> &mut ::protobuf::RepeatedField<StackTraceDataSet_ThreadStackTrace> {
        &mut self.traces
    }

    // Take field
    pub fn take_traces(&mut self) -> ::protobuf::RepeatedField<StackTraceDataSet_ThreadStackTrace> {
        ::std::mem::replace(&mut self.traces, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for StackTraceDataSet_StackTraceSample {
    fn is_initialized(&self) -> bool {
        if self.timestamp.is_none() {
            return false;
        }
        for v in &self.traces {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.traces)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.traces {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.timestamp {
            os.write_int64(1, v)?;
        }
        for v in &self.traces {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StackTraceDataSet_StackTraceSample {
        StackTraceDataSet_StackTraceSample::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp",
                |m: &StackTraceDataSet_StackTraceSample| { &m.timestamp },
                |m: &mut StackTraceDataSet_StackTraceSample| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<StackTraceDataSet_ThreadStackTrace>>(
                "traces",
                |m: &StackTraceDataSet_StackTraceSample| { &m.traces },
                |m: &mut StackTraceDataSet_StackTraceSample| { &mut m.traces },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StackTraceDataSet_StackTraceSample>(
                "StackTraceDataSet.StackTraceSample",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StackTraceDataSet_StackTraceSample {
        static instance: ::protobuf::rt::LazyV2<StackTraceDataSet_StackTraceSample> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StackTraceDataSet_StackTraceSample::new)
    }
}

impl ::protobuf::Clear for StackTraceDataSet_StackTraceSample {
    fn clear(&mut self) {
        self.timestamp = ::std::option::Option::None;
        self.traces.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StackTraceDataSet_StackTraceSample {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StackTraceDataSet_StackTraceSample {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StackTraceDataSet_ThreadStackTrace {
    // message fields
    thread_id: ::std::option::Option<i64>,
    pub frames: ::std::vec::Vec<i64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StackTraceDataSet_ThreadStackTrace {
    fn default() -> &'a StackTraceDataSet_ThreadStackTrace {
        <StackTraceDataSet_ThreadStackTrace as ::protobuf::Message>::default_instance()
    }
}

impl StackTraceDataSet_ThreadStackTrace {
    pub fn new() -> StackTraceDataSet_ThreadStackTrace {
        ::std::default::Default::default()
    }

    // required int64 thread_id = 1;


    pub fn get_thread_id(&self) -> i64 {
        self.thread_id.unwrap_or(0)
    }
    pub fn clear_thread_id(&mut self) {
        self.thread_id = ::std::option::Option::None;
    }

    pub fn has_thread_id(&self) -> bool {
        self.thread_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thread_id(&mut self, v: i64) {
        self.thread_id = ::std::option::Option::Some(v);
    }

    // repeated int64 frames = 2;


    pub fn get_frames(&self) -> &[i64] {
        &self.frames
    }
    pub fn clear_frames(&mut self) {
        self.frames.clear();
    }

    // Param is passed by value, moved
    pub fn set_frames(&mut self, v: ::std::vec::Vec<i64>) {
        self.frames = v;
    }

    // Mutable pointer to the field.
    pub fn mut_frames(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.frames
    }

    // Take field
    pub fn take_frames(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.frames, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for StackTraceDataSet_ThreadStackTrace {
    fn is_initialized(&self) -> bool {
        if self.thread_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.thread_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.frames)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.thread_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.frames {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.thread_id {
            os.write_int64(1, v)?;
        }
        for v in &self.frames {
            os.write_int64(2, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StackTraceDataSet_ThreadStackTrace {
        StackTraceDataSet_ThreadStackTrace::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "thread_id",
                |m: &StackTraceDataSet_ThreadStackTrace| { &m.thread_id },
                |m: &mut StackTraceDataSet_ThreadStackTrace| { &mut m.thread_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "frames",
                |m: &StackTraceDataSet_ThreadStackTrace| { &m.frames },
                |m: &mut StackTraceDataSet_ThreadStackTrace| { &mut m.frames },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StackTraceDataSet_ThreadStackTrace>(
                "StackTraceDataSet.ThreadStackTrace",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StackTraceDataSet_ThreadStackTrace {
        static instance: ::protobuf::rt::LazyV2<StackTraceDataSet_ThreadStackTrace> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StackTraceDataSet_ThreadStackTrace::new)
    }
}

impl ::protobuf::Clear for StackTraceDataSet_ThreadStackTrace {
    fn clear(&mut self) {
        self.thread_id = ::std::option::Option::None;
        self.frames.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StackTraceDataSet_ThreadStackTrace {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StackTraceDataSet_ThreadStackTrace {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StackTraceDataSet_Frame {
    // message fields
    frame_id: ::std::option::Option<i64>,
    frame: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StackTraceDataSet_Frame {
    fn default() -> &'a StackTraceDataSet_Frame {
        <StackTraceDataSet_Frame as ::protobuf::Message>::default_instance()
    }
}

impl StackTraceDataSet_Frame {
    pub fn new() -> StackTraceDataSet_Frame {
        ::std::default::Default::default()
    }

    // required int64 frame_id = 1;


    pub fn get_frame_id(&self) -> i64 {
        self.frame_id.unwrap_or(0)
    }
    pub fn clear_frame_id(&mut self) {
        self.frame_id = ::std::option::Option::None;
    }

    pub fn has_frame_id(&self) -> bool {
        self.frame_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_frame_id(&mut self, v: i64) {
        self.frame_id = ::std::option::Option::Some(v);
    }

    // required string frame = 2;


    pub fn get_frame(&self) -> &str {
        match self.frame.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_frame(&mut self) {
        self.frame.clear();
    }

    pub fn has_frame(&self) -> bool {
        self.frame.is_some()
    }

    // Param is passed by value, moved
    pub fn set_frame(&mut self, v: ::std::string::String) {
        self.frame = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_frame(&mut self) -> &mut ::std::string::String {
        if self.frame.is_none() {
            self.frame.set_default();
        }
        self.frame.as_mut().unwrap()
    }

    // Take field
    pub fn take_frame(&mut self) -> ::std::string::String {
        self.frame.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for StackTraceDataSet_Frame {
    fn is_initialized(&self) -> bool {
        if self.frame_id.is_none() {
            return false;
        }
        if self.frame.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.frame_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.frame)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.frame_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.frame.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.frame_id {
            os.write_int64(1, v)?;
        }
        if let Some(ref v) = self.frame.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StackTraceDataSet_Frame {
        StackTraceDataSet_Frame::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "frame_id",
                |m: &StackTraceDataSet_Frame| { &m.frame_id },
                |m: &mut StackTraceDataSet_Frame| { &mut m.frame_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "frame",
                |m: &StackTraceDataSet_Frame| { &m.frame },
                |m: &mut StackTraceDataSet_Frame| { &mut m.frame },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StackTraceDataSet_Frame>(
                "StackTraceDataSet.Frame",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StackTraceDataSet_Frame {
        static instance: ::protobuf::rt::LazyV2<StackTraceDataSet_Frame> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StackTraceDataSet_Frame::new)
    }
}

impl ::protobuf::Clear for StackTraceDataSet_Frame {
    fn clear(&mut self) {
        self.frame_id = ::std::option::Option::None;
        self.frame.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StackTraceDataSet_Frame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StackTraceDataSet_Frame {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fprotos/eflect_stack_trace.proto\x12\x0ceflect.proto\"\x9d\x03\n\
    \x11StackTraceDataSet\x12J\n\x07samples\x18\x01\x20\x03(\x0b20.eflect.pr\
    oto.StackTraceDataSet.StackTraceSampleR\x07samples\x12=\n\x06frames\x18\
    \x02\x20\x03(\x0b2%.eflect.proto.StackTraceDataSet.FrameR\x06frames\x1az\
    \n\x10StackTraceSample\x12\x1c\n\ttimestamp\x18\x01\x20\x02(\x03R\ttimes\
    tamp\x12H\n\x06traces\x18\x02\x20\x03(\x0b20.eflect.proto.StackTraceData\
    Set.ThreadStackTraceR\x06traces\x1aG\n\x10ThreadStackTrace\x12\x1b\n\tth\
    read_id\x18\x01\x20\x02(\x03R\x08threadId\x12\x16\n\x06frames\x18\x02\
    \x20\x03(\x03R\x06frames\x1a8\n\x05Frame\x12\x19\n\x08frame_id\x18\x01\
    \x20\x02(\x03R\x07frameId\x12\x14\n\x05frame\x18\x02\x20\x02(\tR\x05fram\
    eJ\xec\x05\n\x06\x12\x04\0\0\x16\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x02\x08\x14\n\n\n\x02\x04\0\x12\x04\x04\0\x16\x01\
    \n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x19\n\x0b\n\x04\x04\0\x02\0\x12\x03\
    \x05\x02(\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x05\x02\n\n\x0c\n\x05\x04\
    \0\x02\0\x06\x12\x03\x05\x0b\x1b\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\
    \x1c#\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05&'\n\x0b\n\x04\x04\0\x02\
    \x01\x12\x03\x06\x02\x1c\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x06\x02\n\
    \n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x06\x0b\x10\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x06\x11\x17\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x06\
    \x1a\x1b\n\x0c\n\x04\x04\0\x03\0\x12\x04\x08\x02\x0b\x03\n\x0c\n\x05\x04\
    \0\x03\0\x01\x12\x03\x08\n\x1a\n\r\n\x06\x04\0\x03\0\x02\0\x12\x03\t\x04\
    !\n\x0e\n\x07\x04\0\x03\0\x02\0\x04\x12\x03\t\x04\x0c\n\x0e\n\x07\x04\0\
    \x03\0\x02\0\x05\x12\x03\t\r\x12\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\
    \x03\t\x13\x1c\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03\t\x1f\x20\n\r\n\
    \x06\x04\0\x03\0\x02\x01\x12\x03\n\x04)\n\x0e\n\x07\x04\0\x03\0\x02\x01\
    \x04\x12\x03\n\x04\x0c\n\x0e\n\x07\x04\0\x03\0\x02\x01\x06\x12\x03\n\r\
    \x1d\n\x0e\n\x07\x04\0\x03\0\x02\x01\x01\x12\x03\n\x1e$\n\x0e\n\x07\x04\
    \0\x03\0\x02\x01\x03\x12\x03\n'(\n\x0c\n\x04\x04\0\x03\x01\x12\x04\r\x02\
    \x10\x03\n\x0c\n\x05\x04\0\x03\x01\x01\x12\x03\r\n\x1a\n\r\n\x06\x04\0\
    \x03\x01\x02\0\x12\x03\x0e\x04!\n\x0e\n\x07\x04\0\x03\x01\x02\0\x04\x12\
    \x03\x0e\x04\x0c\n\x0e\n\x07\x04\0\x03\x01\x02\0\x05\x12\x03\x0e\r\x12\n\
    \x0e\n\x07\x04\0\x03\x01\x02\0\x01\x12\x03\x0e\x13\x1c\n\x0e\n\x07\x04\0\
    \x03\x01\x02\0\x03\x12\x03\x0e\x1f\x20\n\r\n\x06\x04\0\x03\x01\x02\x01\
    \x12\x03\x0f\x04\x1e\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x04\x12\x03\x0f\
    \x04\x0c\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x05\x12\x03\x0f\r\x12\n\x0e\n\
    \x07\x04\0\x03\x01\x02\x01\x01\x12\x03\x0f\x13\x19\n\x0e\n\x07\x04\0\x03\
    \x01\x02\x01\x03\x12\x03\x0f\x1c\x1d\n\x0c\n\x04\x04\0\x03\x02\x12\x04\
    \x12\x02\x15\x03\n\x0c\n\x05\x04\0\x03\x02\x01\x12\x03\x12\n\x0f\n\r\n\
    \x06\x04\0\x03\x02\x02\0\x12\x03\x13\x04\x20\n\x0e\n\x07\x04\0\x03\x02\
    \x02\0\x04\x12\x03\x13\x04\x0c\n\x0e\n\x07\x04\0\x03\x02\x02\0\x05\x12\
    \x03\x13\r\x12\n\x0e\n\x07\x04\0\x03\x02\x02\0\x01\x12\x03\x13\x13\x1b\n\
    \x0e\n\x07\x04\0\x03\x02\x02\0\x03\x12\x03\x13\x1e\x1f\n\r\n\x06\x04\0\
    \x03\x02\x02\x01\x12\x03\x14\x04\x1e\n\x0e\n\x07\x04\0\x03\x02\x02\x01\
    \x04\x12\x03\x14\x04\x0c\n\x0e\n\x07\x04\0\x03\x02\x02\x01\x05\x12\x03\
    \x14\r\x13\n\x0e\n\x07\x04\0\x03\x02\x02\x01\x01\x12\x03\x14\x14\x19\n\
    \x0e\n\x07\x04\0\x03\x02\x02\x01\x03\x12\x03\x14\x1c\x1d\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
